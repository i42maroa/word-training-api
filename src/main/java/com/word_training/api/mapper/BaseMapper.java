package com.word_training.api.mapper;

import com.mongodb.client.model.Filters;
import com.mongodb.client.model.UpdateOptions;
import com.word_training.api.exceptions.WordTrainingApiException;
import com.word_training.api.model.enums.RecordType;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;
import org.springframework.data.mongodb.core.query.Update;

import java.time.Clock;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Predicate;

import static com.word_training.api.constants.WordTrainingConstants.DEF_TRANSLATION_FIELD;

public interface BaseMapper {

    default Document updateModificationDate(Clock clock) {
        return Optional.of(OffsetDateTime.now(clock))
                .map(date -> "{modificationDate:{'$date':'" + date + "'}}")
                .map(Document::parse)
                .map(dateUpdate -> new Document().append("$set", dateUpdate))
                .orElseGet(Document::new);
    }

    default Bson filterById(String id) {
        return Filters.eq("_id", new ObjectId(id));
    }

    default void setOptionalUpdate(Document update, String field, String fieldName) {
        Optional.ofNullable(field)
                .ifPresent(value -> update.append(fieldName, value));
    }

    default void setNecesaryUpdate(Document update, String fieldValue, String fieldName, String textError) {
        Optional.ofNullable(fieldValue)
                .ifPresentOrElse(value -> update.append(fieldName, value), () -> {
                    throw new WordTrainingApiException(textError);
                });
    }
    default void setNecesaryUpdateEnum(Document update, Predicate<String> enumFilter, String fieldValue, String fieldName, String textError) {
        Optional.ofNullable(fieldValue)
                .filter(enumFilter)
                .ifPresentOrElse(value -> update.append(fieldName, value), () -> {
                    throw new WordTrainingApiException(textError);
                });
    }

    default String setIdAutogenerated(Document update, String fieldName) {
        var id = new ObjectId().toString();
        update.append(fieldName, id);
        return id;
    }

    default void addOptionalSetUpdate(Update update, String field, String path) {
        Optional.ofNullable(field)
                .ifPresent(value -> update.set(path, value));
    }

    default void setOptionalUpdate(String field, Consumer<String> fieldSet){
        Optional.ofNullable(field).ifPresent(fieldSet);
    }

    default void setNecessaryUpdate(String field, Consumer<String> fieldSet, String errorText){
        Optional.ofNullable(field)
                .ifPresentOrElse(fieldSet, () -> {
                    throw new WordTrainingApiException(errorText);
                });
    }

    default void setNecessaryUpdateEnum(String field, Predicate<String> enumFilter, Consumer<String> fieldSet, String errorText){
        Optional.ofNullable(field)
                .filter(enumFilter)
                .ifPresentOrElse(fieldSet, () -> {
                    throw new WordTrainingApiException(errorText);
                });
    }

    default UpdateOptions generateSingletonArrayFilter(String field, String value) {
        return new UpdateOptions().arrayFilters(
                Collections.singletonList(new Document(field, value)));
    }

    default UpdateOptions generateArrayFilters(Map<String, String> filters) {
        var arrays = filters.entrySet()
                .stream()
                .map(value -> new Document(value.getKey(), value.getValue()))
                .toList();
        return new UpdateOptions().arrayFilters(arrays);
    }
}
