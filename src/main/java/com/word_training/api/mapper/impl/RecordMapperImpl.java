package com.word_training.api.mapper.impl;

import com.mongodb.client.model.UpdateOneModel;
import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.model.Updates;
import com.word_training.api.domain.RecordDocument;
import com.word_training.api.exceptions.WordTrainingApiException;
import com.word_training.api.mapper.RecordMapper;
import com.word_training.api.model.Definition;
import com.word_training.api.model.Example;
import com.word_training.api.model.input.RequestDefinition;
import com.word_training.api.model.input.RequestExample;
import com.word_training.api.model.input.RequestRecord;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.bson.Document;
import org.bson.types.ObjectId;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Service;

import java.time.Clock;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static com.word_training.api.constants.WordTrainingConstants.*;
import static com.word_training.api.model.enums.DefinitionType.isValidDefinitionType;

@Slf4j
@Service
@RequiredArgsConstructor
public class RecordMapperImpl implements RecordMapper {

    private final Clock clock;

    @Override
    public RecordDocument generateRecordByRequest(RequestRecord request) {
        var record = new RecordDocument();

        record.setCreationDate(OffsetDateTime.now());
        record.setModificationDate(OffsetDateTime.now());

        Optional.ofNullable(request)
                .map(RequestRecord::getType)
                .ifPresentOrElse(record::setType, () -> {
                    throw new WordTrainingApiException("Record type not define");
                });

        Optional.ofNullable(request)
                .map(RequestRecord::getValue)
                .ifPresentOrElse(record::setValue, () -> {
                    throw new WordTrainingApiException("Record value not define");
                });

        Optional.ofNullable(request)
                .map(RequestRecord::getDefinitions)
                .ifPresent(list -> {
                    list.forEach(this::setDefinitionIdAndExampleId);
                    record.setDefinitions(list);
                });

        return record;
    }

    @Override
    public UpdateOneModel<Document> generateUpdateRecord(ObjectId id, RequestRecord record) {
        var update = new Update();

        Optional.ofNullable(record.getValue())
                .ifPresent(v -> update.set(REC_VALUE_FIELD, v));
        Optional.ofNullable(record.getType())
                .ifPresent(v -> update.set(REC_TYPE_FIELD, v));
        Optional.ofNullable(record.getDefinitions())
                .ifPresent(v -> update.set(DEFINITIONS_FIELD, v));

        return new UpdateOneModel<>(filterById(id), Updates.combine(update.getUpdateObject(), updateModificationDate(clock)));
    }

    @Override
    public List<UpdateOneModel<Document>> generateUpdateNewDefinition(ObjectId id, RequestDefinition request) {

        var update = new Document();

        Optional.ofNullable(request.getTranslation())
                .ifPresentOrElse(v -> update.append(DEF_TRANSLATION_FIELD, v), () -> {
                    throw new WordTrainingApiException("Definition translation not defined");
                });

        Optional.ofNullable(request.getType())
                .filter(isValidDefinitionType)
                .ifPresentOrElse(v -> update.append(DEF_TYPE_FIELD, v), () -> {
                    throw new WordTrainingApiException("Definition type not valid");
                });

        setOptionalUpdate(update, request.getInfo(), DEF_INFO_FIELD);
        var definitionId = setIdAutogenerated(update, DEF_DEFINITIONID_FIELD);


        var pushUpdate = Updates.addToSet(DEFINITIONS_FIELD, update);
        var updateOneList = new ArrayList<UpdateOneModel<Document>>();
        updateOneList.add(new UpdateOneModel<>(filterById(id), Updates.combine(pushUpdate, updateModificationDate(clock))));

        Optional.ofNullable(request.getExamples())
                .map(examples -> {
                    var exampleUpdate = new Document();
                    examples.forEach(e -> {
                                Optional.ofNullable(e.getSentence())
                                        .ifPresentOrElse(v -> exampleUpdate.append(EX_SENTENCE_FIELD, v), () -> {
                                            throw new WordTrainingApiException("Example sentence not defined");
                                        });
                                setOptionalUpdate(exampleUpdate, e.getTranslation(), EX_TRANSLATION_FIELD);
                                setOptionalUpdate(exampleUpdate, e.getInfo(), EX_INFO_FIELD);

                                setIdAutogenerated(exampleUpdate, EX_EXAMPLE_ID_FIELD);
                            }
                    );
                    return exampleUpdate;
                }).map(v -> {
                    var pushUpdateExamples = Updates.addToSet(DEFINITIONS_FIELD + DOT + ARRAY_FILTER_PARAM + DOT + DEF_EXAMPLES_FIELD, v);
                    var arrayFilter = new Document(PARAM + DOT + DEF_DEFINITIONID_FIELD, definitionId);
                    return new UpdateOneModel<Document>(filterById(id), Updates.combine(pushUpdateExamples, updateModificationDate(clock)),
                            new UpdateOptions().arrayFilters(Collections.singletonList(arrayFilter)));
                }).ifPresent(updateOneList::add);


        return updateOneList;
    }

    @Override
    public UpdateOneModel<Document> generateUpdateNewExample(ObjectId id, String definitionId, RequestExample request) {
        var update = new Document();

        Optional.ofNullable(request.getSentence())
                .ifPresentOrElse(v -> update.append(EX_SENTENCE_FIELD, v), () -> {
                    throw new WordTrainingApiException("Example sentence not defined");
                });

        setOptionalUpdate(update, request.getTranslation(), EX_TRANSLATION_FIELD);
        setOptionalUpdate(update, request.getInfo(), EX_INFO_FIELD);

        update.append(EX_EXAMPLE_ID_FIELD, new ObjectId().toString());

        var arrayFilter = new Document(PARAM + DOT + DEF_DEFINITIONID_FIELD, definitionId);

        var pushUpdate = Updates.addToSet(DEFINITIONS_FIELD + DOT + ARRAY_FILTER_PARAM + DOT + DEF_EXAMPLES_FIELD, update);

        return new UpdateOneModel<>(filterById(id), Updates.combine(pushUpdate, updateModificationDate(clock)),
                new UpdateOptions().arrayFilters(Collections.singletonList(arrayFilter)));
    }

    @Override
    public UpdateOneModel<Document> generateUpdateModifyExample(ObjectId id, String definitionId, String exampleId, RequestExample request) {
        var update = new Update();
        var pathArray = DEFINITIONS_FIELD + DOT + ARRAY_FILTER_PARAM + DOT + DEF_EXAMPLES_FIELD + DOT + ARRAY_FILTER_PARAM2 + DOT;

        Optional.ofNullable(request.getSentence())
                .ifPresent(v -> update.set(pathArray + EX_SENTENCE_FIELD, v));
        Optional.ofNullable(request.getTranslation())
                .ifPresent(v -> update.set(pathArray + EX_TRANSLATION_FIELD, v));
        Optional.ofNullable(request.getInfo())
                .ifPresent(v -> update.set(pathArray + EX_INFO_FIELD, v));

        var arrayFilterDefinition = new Document(PARAM + DOT + DEF_DEFINITIONID_FIELD, definitionId);
        var arrayFilterExample = new Document(PARAM2 + DOT + EX_EXAMPLE_ID_FIELD, exampleId);
        return new UpdateOneModel<>(filterById(id), Updates.combine(update.getUpdateObject(), updateModificationDate(clock)),
                new UpdateOptions().arrayFilters(List.of(arrayFilterDefinition, arrayFilterExample)));
    }


    private void setDefinitionIdAndExampleId(Definition def) {
        def.setDefinitionId(new ObjectId().toString());
        Optional.ofNullable(def.getExamples())
                .ifPresent(examples -> examples.forEach(this::setExampleId));
    }


    private void setExampleId(Example example) {
        example.setExampleId(new ObjectId().toString());
    }

    private void setOptionalUpdate(Document update, String field, String fieldName) {
        Optional.ofNullable(field)
                .ifPresent(value -> update.append(fieldName, value));
    }

    private String setIdAutogenerated(Document update, String fieldName) {
        var id = new ObjectId().toString();
        update.append(fieldName, id);
        return id;
    }
}
